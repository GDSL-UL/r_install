# estimate model
model1 <- glm(eq1, data= qlfs,
family=binomial(link="logit"),
na.action=na.exclude)
# coefficients (log-odds)
round(coefficients(model1),2)
# odds ratio
round(exp(coef(model1)),2)
## odds ratios and 95% CI
exp(cbind(OD = coef(model), confint(model1)))
exp(cbind(OD = coef(model1), confint(model1)))
## odds ratios and 95% CI
exp(cbind(odds-ratio = coef(model1), confint(model1)))
## odds ratios and 95% CI
exp(cbind("odds-ratio" = coef(model1), confint(model1)))
## odds ratios and 95% CI
exp(cbind("Odds-ratio" = coef(model1), confint(model1)))
round(exp(cbind("Odds-ratio" = coef(model1), confint(model1))),2)
lm(NetPay ~ Sex, data = qlfs)
class(Sex)
Sex_dv <- dummy.code(Sex)
qlfs <- cbind(qlfs, Sex_dv)
View(qlfs)
lm(NetPay ~ Female, data = qlfs)
export_summs(model2, model3)
# clean workspace
rm(list=ls())
# load data
load("../data/data_census.RData")
ggplot(data=census) +
geom_point( aes(y= illness, x= Unemployed) )   +
geom_smooth(aes(y= illness, x= Unemployed), method = "lm", se=FALSE) +
# Add labels
labs(title= paste(" "), y="Illness (%)", x="Unemployed (%)") +
theme_classic() +
theme(axis.text=element_text(size=14))
# specify a model equation
eq <- illness ~ No_Quals + Professionals + Age_65plus
model <- lm(formula = eq, data = census)
# coefficients
round(coefficients(model),2)
# create dummy variables
region_dv <- dummy.code(census$Region)
census <- cbind(census, region_dv)
census[1:10,c(2,25:33)]
View(census)
census[1:10,c(2,24:33)]
View(census)
attributes(census$Region)
levels(census$Region)
levels(census$Region)
# change reference category
census$Region <- relevel(census$Region, ref="West Midlands")
# check levels again
levels(census$Region)
# clean workspace
rm(list=ls())
# load data
load("../data/data_census.RData")
levels(census$Region)
eq5 <- illness ~ No_Quals + Professionals + Age_65plus + factor(Region)
model5 <- lm(formula = eq5, data = census)
export_summs(model5)
# clean workspace
rm(list=ls())
# load data
load("../data/data_qlfs.RData")
qlfs <- mutate(qlfs,
sus_tr = ifelse(
TravelMode == "Motorbike,moped,scooter"
| TravelMode == "Bicycle"
| TravelMode =="Walk"
, 1, 0))
attach(qlfs)
t1 <- table(sus_tr, Sex)
# specify a model
eq1 <- sus_tr ~ Sex + AgeGroup + NetPay
# estimate model
model1 <- glm(eq1, data= qlfs,
family=binomial(link="logit"),
na.action=na.exclude)
# coefficients (log-odds)
round(coefficients(model1),2)
# odds ratio
round(exp(coef(model1)),2)
## odds ratios and 95% CI
round(exp(cbind("Odds-ratio" = coef(model1), confint(model1))),2)
summary(model1)
summary(model1)
round(summary(model1), 2)
round(summary(model1), 2)
summary(model1)
with(model1, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
with(model1, null.deviance - deviance)
with(model1, df.null - df.residual)
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = rep(seq(from = 0, to = 1000, length.out = 100)))
df_p
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = rep(seq(from = 0, to = 1000, length.out = 100), 4))
df_p
rep(seq(from = 0, to = 1000, length.out = 100), 4)
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = rep(seq(from = 0, to = 1000, length.out = 100), 4))
fe_p
df_p
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = mean(NetPay)))
df_p
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = mean(!is.na(NetPay)))
df_p
df_p <- with(qlfs, data.frame(Sex = 1, AgeGroup = factor(1:4), NetPay = mean(!is.na(NetPay))))
df_p
df_p <- with(qlfs, data.frame(Sex = 1
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
df_p <- with(qlfs, data.frame(Sex = factor(1:2)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
levels(Sex)
df_p <- with(qlfs, data.frame(Sex = factor(2)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
class(Sex)
levels(Sex)
levels(AgeGroup)
class(AgeGroup)
df_p <- with(qlfs, data.frame(Sex = factor(1:2)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
summary(model1)
summary(model1)
summary(model1)
summary(model1)
summary(model1)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
df_p <- with(qlfs, data.frame(Sex = factor(1:2)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
df_p <- with(qlfs, data.frame(SexFemale = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_pv <- cbind(df_p, predict(model1
,
newdata = df_p,
type = "link",
se = TRUE)
)
df_p
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:3)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:3)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:4)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p <- with(qlfs, data.frame(Sex = factor(1)
, AgeGroup = factor(1:3)
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 3)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df <- with(qlfs, data.frame(Sex = factor(1:2), gpa = AgeGroup = factor(1:4), NetPay = mean(NetPay)))
df
df <- with(qlfs, data.frame(Sex = factor(1:2), gpa = AgeGroup = factor(1:4), NetPay = mean(NetPay)))
df <- with(qlfs, data.frame(Sex = factor(1:2), gpa = AgeGroup = factor(1:4), NetPay = mean(NetPay)))
df
df <- with(qlfs, data.frame(Sex = factor(1:2), AgeGroup = factor(1:4), NetPay = mean(NetPay)))
df
df <- with(qlfs, data.frame(Sex = factor(1:2), AgeGroup = factor(1:4), NetPay = mean(!is.na(NetPay)))
df
df <- with(qlfs, data.frame(Sex = factor(1:2), AgeGroup = factor(1:4), NetPay = mean(!is.na(NetPay))))
df
df$p <- predict(model1, newdata = df, type = "response")
levels(Sex)
levels(AgeGroup)
df <- with(qlfs, data.frame(Sex = factor("Female", levels = c("Male", "Female")), AgeGroup = factor(1:4), NetPay = mean(!is.na(NetPay))))
df$p <- predict(model1, newdata = df, type = "response")
df <- with(qlfs, data.frame(Sex = factor("Female", levels = c("Male", "Female")), AgeGroup = factor(c("16-29", "30-44", "45-64", "65+")), NetPay = mean(!is.na(NetPay))))
df$p <- predict(model1, newdata = df, type = "response")
df
df_p <- with(qlfs, data.frame(Sex = factor("Female", levels = c("Male", "Female"))
, AgeGroup = factor(c("16-29", "30-44", "45-64", "65+"))
, NetPay = rep(seq(from = 200, to = 800, length.out = 100), 4)
)
)
df_p
df_pv <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
df_pv
# add CIs
df_pci <- within(df_pci, {
p_prob <- plogis(fit)
ci95_lb <- plogis(fit - (1.96 * se.fit))
ci95_ub <- plogis(fit + (1.96 * se.fit))
})
# add se
df_pci <- cbind(df_p, predict(model1
, newdata = df_p,
type = "link",
se = TRUE)
)
# add CIs
df_pci <- within(df_pci, {
p_prob <- plogis(fit)
ci95_lb <- plogis(fit - (1.96 * se.fit))
ci95_ub <- plogis(fit + (1.96 * se.fit))
})
df_pci
head(df_pci)
ggplot(df_pci, aes(x = NetPay, y = p_prob))
+ geom_ribbon(aes(ymin = LL, ymax = UL, fill = AgeGroup), alpha = 0.2)
ggplot(df_pci, aes(x = NetPay, y = p_prob))
+ geom_ribbon(aes(ymin = LL, ymax = UL, fill = AgeGroup), alpha = 0.2)
ggplot(df_pci, aes(x = NetPay, y = p_prob))
+ geom_ribbon(aes(ymin = LL, ymax = UL, fill = AgeGroup), alpha = 0.2)
ggplot(df_pci, aes(x = NetPay, y = p_prob)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = AgeGroup), alpha = 0.2) +
geom_line(aes(colour = AgeGroup), size = 1)
ggplot(df_pci, aes(x = NetPay, y = p_prob)) +
geom_ribbon(aes(ymin = ci95_ub, ymax = ci95_lb, fill = AgeGroup), alpha = 0.2) +
geom_line(aes(colour = AgeGroup), size = 1)
ggplot(df_pci, aes(x = NetPay, y = p_prob)) +
geom_ribbon(aes(ymin = ci95_ub, ymax = ci95_lb, fill = AgeGroup), alpha = 0.2) +
geom_line(aes(colour = AgeGroup), size = 1) +
theme_classic()
citation("cim")
citation("CIM")
rm(list=ls())
citation("CIM")
library(CIM)
install.packages("CIM")
library(CIM)
citation("CIM")
GravModel <- readRDS("/Users/Franciscorowe 1/Dropbox/Francisco/Research/in_progress/mig_estimates/data/model_data/GravModel.rds")
rm(decompose_beer)
rm(output)
rm(m_beer)
# library necessary packages
library(glmnet)
library(countrycode)
library(tidyverse)
rm(list=ls())
#######
# 1. Read data
# COVID data
case_data <- read.csv('../data/for_code/owid-covid-data.csv')
# list of cities
cities_data <- read.csv("../data/for_code/UN_Cities_names.csv")
# mobility data
mob_data <- read.csv("../data/for_code/mobility_and_stringency_uncities.csv")
#######
# 2. Data wrangling
## 2.1 COVID data
# define a vector of city names
cities <- as.vector(cities_data[,1])
# define a vector of country names
country <- countrycode(cities_data[,2], "country.name", "iso3c")
# exclude Hong Kong - assume reported with China
case_data_subset <- subset(case_data, iso_code %in% unique(country)[-grep("HKG", unique(country))])
# restrict period of analysis to end of March
case_data_subset <- subset(case_data_subset, date <= as.Date("2020-04-30") )
# format dates
case_data_subset$date <- as.Date(case_data_subset$date)
## 2.2. Mobility data
# attach the country code
mob_data$iso_code <- countrycode(mob_data[,2], "country.name", "iso3c")
# modify the date column
mob_data$Date <- as.Date(mob_data$Date, "%d/%m/%Y")
# set the maximum date to end of March
mob_data <- subset(mob_data, Date <= as.Date("2020-04-30") )
# extract the month
mob_data$month <- strftime(mob_data$Date, "%m")
# select variable set
mob_data <- mob_data %>%
select(-c(4))
## 2.3 Create a single data frame
cdf <- left_join(case_data_subset, mob_data,by = c("iso_code" = "iso_code", "date" = "Date"))
## 2.4 Restrict sample to 14/02 when mobility data start
cdf <- cdf %>% filter(date > "2020-02-14")
## 2.5 Creating additional variables
# growth rate
cdf <- cdf %>% group_by(City) %>%
filter(total_cases > 0) %>%
mutate(t_cases_lag = lag(total_cases, n=1, default = NA))
library(countrycode)
library(tidyverse)
rm(list=ls())
#######
# 1. Read data
# COVID data
case_data <- read.csv('../data/for_code/owid-covid-data.csv')
# list of cities
cities_data <- read.csv("../data/for_code/UN_Cities_names.csv")
# mobility data
mob_data <- read.csv("../data/for_code/mobility_and_stringency_uncities.csv")
#######
# 2. Data wrangling
## 2.1 COVID data
# define a vector of city names
cities <- as.vector(cities_data[,1])
# define a vector of country names
country <- countrycode(cities_data[,2], "country.name", "iso3c")
# exclude Hong Kong - assume reported with China
case_data_subset <- subset(case_data, iso_code %in% unique(country)[-grep("HKG", unique(country))])
# restrict period of analysis to end of March
case_data_subset <- subset(case_data_subset, date <= as.Date("2020-04-30") )
# format dates
case_data_subset$date <- as.Date(case_data_subset$date)
## 2.2. Mobility data
# attach the country code
mob_data$iso_code <- countrycode(mob_data[,2], "country.name", "iso3c")
# modify the date column
mob_data$Date <- as.Date(mob_data$Date, "%d/%m/%Y")
# set the maximum date to end of March
mob_data <- subset(mob_data, Date <= as.Date("2020-04-30") )
# extract the month
mob_data$month <- strftime(mob_data$Date, "%m")
# select variable set
mob_data <- mob_data %>%
select(-c(4))
## 2.3 Create a single data frame
cdf <- left_join(case_data_subset, mob_data,by = c("iso_code" = "iso_code", "date" = "Date"))
## 2.4 Restrict sample to 14/02 when mobility data start
cdf <- cdf %>% filter(date > "2020-02-14")
## 2.5 Creating additional variables
# growth rate
cdf <- cdf %>% group_by(City) %>%
filter(total_cases > 0) %>%
mutate(t_cases_lag = lag(total_cases, n=1, default = NA))
library(countrycode)
library(tidyverse)
rm(list=ls())
#######
# 1. Read data
# COVID data
case_data <- read.csv('../data/for_code/owid-covid-data.csv')
# list of cities
cities_data <- read.csv("../data/for_code/UN_Cities_names.csv")
# mobility data
mob_data <- read.csv("../data/for_code/mobility_and_stringency_uncities.csv")
#######
# 2. Data wrangling
## 2.1 COVID data
# define a vector of city names
cities <- as.vector(cities_data[,1])
# define a vector of country names
country <- countrycode(cities_data[,2], "country.name", "iso3c")
# exclude Hong Kong - assume reported with China
case_data_subset <- subset(case_data, iso_code %in% unique(country)[-grep("HKG", unique(country))])
# restrict period of analysis to end of March
case_data_subset <- subset(case_data_subset, date <= as.Date("2020-04-30") )
# format dates
case_data_subset$date <- as.Date(case_data_subset$date)
## 2.2. Mobility data
# attach the country code
mob_data$iso_code <- countrycode(mob_data[,2], "country.name", "iso3c")
# modify the date column
mob_data$Date <- as.Date(mob_data$Date, "%d/%m/%Y")
# set the maximum date to end of March
mob_data <- subset(mob_data, Date <= as.Date("2020-04-30") )
# extract the month
mob_data$month <- strftime(mob_data$Date, "%m")
# select variable set
mob_data <- mob_data %>%
select(-c(4))
## 2.3 Create a single data frame
cdf <- left_join(case_data_subset, mob_data,by = c("iso_code" = "iso_code", "date" = "Date"))
## 2.4 Restrict sample to 14/02 when mobility data start
cdf <- cdf %>% filter(date > "2020-02-14")
## 2.5 Creating additional variables
# growth rate
cdf <- cdf %>% group_by(City) %>%
filter(total_cases > 0) %>%
mutate(t_cases_lag = lag(total_cases, n=1, default = NA))
fuas <- st_read("layers/United Kingdom.shp")
# filter the areas needed
fuas <- subset(fuas, fuaname  %in% c('Middlesbrough', "Hartlepool", "Darlington"))
# https://en.wikipedia.org/wiki/Teesside
# info on which urban areas belong to Teesside
# in our dataset Teesside consists of Middlesbrough, Hartlepool and Darlington
full_data <- st_read("classification_complete.gpkg")
# create a new column with assigning Teesside to the grids the belong to this area
full_data <- full_data %>%
mutate(Teesside = case_when(fuaname  %in% c('Middlesbrough', "Hartlepool", "Darlington") ~ "Teesside"))
# one grid has been assigned to Middlesbrough by mistake, I removed it
full_data <- subset(full_data, full_data$fuaname != 'Middlesbrough' | full_data$RegionNation != 'Yorkshire and The Humber')
getwd()
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
setwd("/Users/Franciscorowe 1/Dropbox/Francisco/Research/github_projects/r_install")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
View(output)
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
getwd()
setwd("/Users/Franciscorowe 1/Dropbox/Francisco/Research/github_projects/r_install")
getwd()
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
