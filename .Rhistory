scale_fill_distiller(palette="Spectral")+
scale_y_discrete(name="", expand=c(0,0))+
scale_x_date(name="Date", limits=as.Date(c(plotfrom, plotto)), expand=c(0,0))+
labs(title="Timelines for COVID-19 cases in Local Authorities/Council Areas across the UK",
subtitle=paste0("The heatmap represents the 7-day rolling average of the number of new confirmed cases, normalised to the maximum value within the Local Authority.\nLAs are ordered by the date at which they reached their peak number of new cases. Bars on the right represent the absolute number of cases in each LA.\nData updated to ", plotto, ". Data for most recent days is provisional and may be revised upwards as additional tests are processed."),
caption="Data from PHE, PHW, PHS & DoHNI | Plot by @VictimOfMaths")+
theme(axis.line.y=element_blank(), plot.subtitle=element_text(size=rel(0.78)), plot.title.position="plot",
axis.text.y=element_text(colour="Black"))
casetiles.all
casebars.all <- ggplot(subset(casedata, date==maxcaseday), aes(x=totalcases, y=fct_reorder(name, maxcaseday), fill=totalcases))+
geom_col(show.legend=FALSE)+
theme_classic()+
scale_fill_distiller(palette="Spectral")+
scale_x_continuous(name="Total confirmed cases")+
theme(axis.title.y=element_blank(), axis.line.y=element_blank(), axis.text.y=element_blank(),
axis.ticks.y=element_blank(), axis.text.x=element_text(colour="Black"))
casebars.all
theme_set(theme_cowplot())
ggplot(casedata, aes(x=date, y=fct_reorder(name, maxcaseday), fill=maxcaseprop))+
geom_tile(colour="White", show.legend=FALSE)+
theme_classic()+
scale_fill_distiller(palette="Spectral")+
scale_y_discrete(name="", expand=c(0,0))+
scale_x_date(name="Date", limits=as.Date(c(plotfrom, plotto)), expand=c(0,0))+
labs(title="Timelines for COVID-19 cases in Local Authorities/Council Areas across the UK",
subtitle=paste0("The heatmap represents the 7-day rolling average of the number of new confirmed cases, normalised to the maximum value within the Local Authority.\nLAs are ordered by the date at which they reached their peak number of new cases. Bars on the right represent the absolute number of cases in each LA.\nData updated to ", plotto, ". Data for most recent days is provisional and may be revised upwards as additional tests are processed."),
caption="Data from PHE, PHW, PHS & DoHNI | Plot by @VictimOfMaths")+
theme(axis.line.y=element_blank(), plot.subtitle=element_text(size=rel(0.78)), plot.title.position="plot",
axis.text.y=element_text(colour="Black"))
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
cumcases = "cumCasesBySpecimenDate",
cumcasesrate = "cumCasesBySpecimenDateRate",
tests = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
tests = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
deaths     = "newDeaths28DaysByPublishDate",
tests      = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
View(covid_19_cases)
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
deaths     = "newDeaths28DaysByPublishDate",
tests      = "newPillarOneTestsByPublishDate",
cum_deaths = "cumDeaths28DaysByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
deaths     = "newDeaths28DaysByDeathDate",
tests      = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
deaths     = "newDeaths28DaysByDeathDate",
#    tests      = "newPillarOneTestsByPublishDate"
)
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
deaths     = "newDeaths28DaysByDeathDate"
#    tests      = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
rm(list=ls())
library(ukcovid19)
library(readr)
library(ggplot2)
library(httr)
library(RColorBrewer)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
cumcases   = "cumCasesBySpecimenDate"
# deaths     = "newDeaths28DaysByDeathDate"
#    tests      = "newPillarOneTestsByPublishDate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
library(equatiomatic)
um_hsb <- lmer(mathach ~ 1 + (1|schid), data = hsb)
extract_eq(um_hsb)
library(lme4)
um_hsb <- lmer(mathach ~ 1 + (1|schid), data = hsb)
extract_eq(um_hsb)
library(equatiomatic)
library(lme4)
um_hsb <- lmer(math ~ 1 + (1|sch.id), data = hsb)
extract_eq(um_hsb)
um_long3 <- lmer(score ~ 1 + (1|sid) + (1|school) + (1|district),
data = sim_longitudinal)
#> boundary (singular) fit: see ?isSingular
extract_eq(um_long3)
extract_eq(lev1_hsb, mean_separate = FALSE)
lev1_hsb <- lmer(math ~ female + ses + minority + (1|sch.id), hsb)
extract_eq(lev1_hsb)
extract_eq(lev1_hsb, mean_separate = FALSE)
setwd("/Users/franciscorowe/Dropbox/Francisco/Research/github_projects/r_install")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
setwd("/Users/franciscorowe/Dropbox/Francisco/Research/github_projects/r_install")
getwd()
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
`r-installation-guide` <- readRDS("/Users/franciscorowe/Dropbox/Francisco/Research/github_projects/r_install/installation-guide.rds")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
